{"version":3,"file":"assets/css/pages/term-conditions.css","mappings":"AA0RQ;EACI;EAtKA,iBAFmB;EAEnB,gBAFmB;EAEnB,mBAFmB;AC9G/B;ADuSgB;EAlBR;IA0BwB,iBALmB;IAKnB,mBALmB;ECrSjD;AACF;AD+QQ;EACI;EAtKA,iBAFmB;ACpG/B;AD6RgB;EAlBR;IA0BwB,iBALmB;EC5RjD;AACF;ADsQQ;EACI;EAtKA,iBAFmB;AC3F/B;ADoRgB;EAlBR;IA0BwB,iBALmB;ECnRjD;AACF;AA1BA;ED4UY;AC/SZ;AD4TQ;ECzVR;ID0VY;ECzTV;AACF;ADuTQ;ECzVR;ID0VY;ECpTV;AACF;ADkTQ;ECzVR;ID0VY;EC/SV;AACF;AA1CI;EAEI;EACA;EACA;EACA;EACA;EACA;EDmUI;ECjUJ;AA2CR;ADmSQ;ECvVJ;IDwVQ;EChSV;AACF;AD8RQ;ECvVJ;IDwVQ;EC3RV;AACF;ADyRQ;ECvVJ;IDwVQ;ECtRV;AACF;AAxDI;EACI;ED8TI;ACnQZ;ADgRQ;EC5UJ;ID6UQ;EC7QV;AACF;AD2QQ;EC5UJ;ID6UQ;ECxQV;AACF;ADsQQ;EC5UJ;ID6UQ;ECnQV;AACF;AAvEI;EACI;AAyER;AAxEQ;EDyTI;AC9OZ;AD2PQ;ECtUA;IDuUI;ECxPV;AACF;ADsPQ;ECtUA;IDuUI;ECnPV;AACF;ADiPQ;ECtUA;IDuUI;EC9OV;AACF;AAtFQ;EAEI;AAuFZ,C","sources":["webpack:///./source/scss/config/_mixin.scss","webpack:///./source/scss/pages/term-conditions.scss"],"sourcesContent":["@use 'sass:math';\r\n@use 'sass:map';\r\n@use 'sass:list';\r\n@use 'sass:string';\r\n@use '_variable.scss' as var;\r\n@use '_function.scss' as func;\r\n\r\n// |‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾| //\r\n// | tmdrMIX v.3.1.1                         | //\r\n// | last update : 04 / 06 / 2024            | //\r\n// |_________________________________________| //\r\n\r\n// transform with fallback\r\n@mixin transform($declaration) {\r\n    -webkit-transform: #{$declaration};\r\n    -moz-transform: #{$declaration};\r\n    -ms-transform: #{$declaration};\r\n    -o-transform: #{$declaration};\r\n    transform: #{$declaration};\r\n}\r\n\r\n// transition with fallback\r\n@mixin transition($option) {\r\n    -webkit-transition: #{$option};\r\n    -moz-transition: #{$option};\r\n    -ms-transition: #{$option};\r\n    -o-transition: #{$option};\r\n    transition: #{$option};\r\n}\r\n\r\n// display flex with fallback\r\n@mixin displayFlex {\r\n    display: block;\r\n    display: -webkit-box;\r\n    display: -webkit-flex;\r\n    display: -ms-flexbox;\r\n    display: flex;\r\n}\r\n\r\n// make ratio classes\r\n@mixin imageRatio($desktopDimension, $mobileDimension: false, $maxWidth: false, $objectFit: contain, $className : 'image') {\r\n    &__#{$className}-container {\r\n\r\n        $dektopWidth : list.nth($desktopDimension, 1);\r\n        $desktopHeight: null;\r\n        @if ( list.length($desktopDimension) > 1 ) {\r\n            $desktopHeight : list.nth($desktopDimension, 2);\r\n        } @else {\r\n            $desktopHeight : list.nth($desktopDimension, 1);\r\n        }\r\n\r\n        position: relative;\r\n        width: 100%;\r\n\r\n        @if ( $maxWidth ) {\r\n            display: inline-block;\r\n            @if ( $maxWidth == true ) {\r\n                @include vwUnit(max-width, $dektopWidth);\r\n            } @else {\r\n                @include vwUnit(max-width, $maxWidth);\r\n            }\r\n        } @else {\r\n            display: block;\r\n        }\r\n\r\n        &:before {\r\n            content: \"\";\r\n            display: block;\r\n            padding-top: math.div($desktopHeight, $dektopWidth) * 100%;\r\n        }\r\n\r\n        .ratio-item {\r\n            object-fit: $objectFit;\r\n        }\r\n\r\n        @if ( $mobileDimension ) {\r\n            $mobileWidth : list.nth($mobileDimension, 1);\r\n            $mobileHeight : null;\r\n            @if ( list.length($mobileDimension) > 1 ) {\r\n                $mobileHeight : list.nth($mobileDimension, 2);\r\n            } @else {\r\n                $mobileHeight : list.nth($mobileDimension, 1);\r\n            }\r\n\r\n            @media screen and (max-width: func.mobileStart()) {\r\n\r\n                // @if ( $maxWidth ) {\r\n                    // @if ( $maxWidth == true ) {\r\n                    //     @include vwUnit(max-width, $mobileWidth);\r\n                    // }\r\n                // }\r\n\r\n                &:before {\r\n                    padding-top: math.div($mobileHeight, $mobileWidth) * 100%;\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Image Ratio - Art DIrection\r\n\r\n\r\n// element state mixin\r\n@mixin fullState {\r\n    &:hover, &:active, &:focus, &:active:hover, &:active:focus {\r\n        @content;\r\n    }\r\n}\r\n\r\n// responsive Font Size\r\n\r\n// -- responsice font size component -- start\r\n@mixin printOtherProp( $fontName, $breakpoint ) {\r\n    @each $property, $value in map.get( var.$fontSizes, $fontName, $breakpoint ) {\r\n        @if ( $property != font-size ) {\r\n            #{$property}: $value;\r\n        }\r\n    }\r\n}\r\n\r\n@mixin elypsisDefaultProp {\r\n    display: block; // Fallback for non-webkit\r\n    display: -webkit-box;\r\n    -webkit-box-orient: vertical;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n}\r\n\r\n@mixin elypsisProperty($fontName, $fontSize, $line-to-show, $line-height, $breakpoint) {\r\n    $breakpointValue : null;\r\n    @if ( $breakpoint == desktop ) {\r\n        $breakpointValue : list.nth( var.$desktopBreakpoints, 1 );\r\n    }\r\n    height: func.unit( $fontSize * $line-height * $line-to-show, $breakpointValue );\r\n    line-height: $line-height;\r\n    -webkit-line-clamp: $line-to-show;\r\n\r\n    @each $property, $value in map.get(var.$fontSizes, $fontName, $breakpointValue) {\r\n        @if ( $property != 'font-size' and $property != 'line-height' ) {\r\n            @if ( $property != font-size ) {\r\n                #{$property}: $value;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@mixin elypsisResProp($elypsis, $fontName, $line-height, $line-to-show, $breakpoint) {\r\n                \r\n    $elypFS: null;\r\n    $elypLH: null;\r\n\r\n    @if ( $elypsis == true ) {\r\n        // get font-size\r\n        @if (map.get( var.$fontSizes, $fontName, $breakpoint, font-size )) {\r\n            $elypFS: map.get( var.$fontSizes, $fontName, $breakpoint, font-size );\r\n        }\r\n        @else {\r\n    \r\n            @if ( $breakpoint > list.nth( var.$mobileBreakpoints, 1 ) ) {\r\n                $elypFS: map.get( var.$fontSizes, $fontName, desktop, font-size );\r\n            } \r\n            @else {\r\n                $elypFS: map.get( var.$fontSizes, $fontName, mobile, font-size );\r\n            }\r\n        }\r\n        \r\n        // get line-heigt\r\n        @if (map.get( var.$fontSizes, $fontName, $breakpoint, line-height )) {\r\n            $elypLH: map.get( var.$fontSizes, $fontName, $breakpoint, line-height );\r\n        }\r\n        @else if (map.get( var.$fontSizes, $fontName, $breakpoint, line-height ) == null) {\r\n    \r\n            @if ( $breakpoint <= list.nth( var.$mobileBreakpoints, 1 ) and map.get( var.$fontSizes, $fontName, mobile, line-height ) ) {\r\n                $elypLH: map.get( var.$fontSizes, $fontName, mobile, line-height );\r\n            } \r\n            @else if (map.get( var.$fontSizes, $fontName, desktop, line-height )) {\r\n                $elypLH: map.get( var.$fontSizes, $fontName, desktop, line-height );\r\n            }\r\n            @else {\r\n                $elypLH: $line-height;\r\n            }\r\n        }\r\n    \r\n        // @debug $elypFS;\r\n        // @debug $elypLH;\r\n        // @debug $line-to-show;\r\n        // @debug $elypFS * $elypLH * $line-to-show;\r\n    \r\n        height: func.unit( $elypFS * $elypLH * $line-to-show, $breakpoint );\r\n    }\r\n}\r\n// -- responsice font size component -- end\r\n\r\n@mixin typo($fontName, $elypsis: false, $line-to-show: 1, $line-height: 1.6) {\r\n\r\n    @each $breakpoint in var.$desktopBreakpoints {\r\n        @if ( $breakpoint == list.nth( var.$desktopBreakpoints, 1 ) ) {\r\n            $breakpointMap : desktop;\r\n\r\n            @if ( $elypsis == true ) {\r\n                font-size: var(--tdfs-#{$fontName});\r\n                \r\n                @include elypsisDefaultProp;\r\n\r\n                $elypFS: map.get( var.$fontSizes, $fontName, desktop, font-size );\r\n                $elypLH: null;\r\n\r\n                @if (map.get( var.$fontSizes, $fontName, desktop, line-height )) {\r\n                    $elypLH: map.get( var.$fontSizes, $fontName, desktop, line-height );\r\n                }\r\n                @else {\r\n                    $elypLH: $line-height;\r\n                }\r\n\r\n                @include elypsisProperty($fontName, $elypFS, $line-to-show, $elypLH, $breakpointMap)\r\n            }\r\n\r\n            @else {\r\n                @extend %fs-#{$fontName};\r\n            }\r\n        }\r\n        @else {\r\n            @media (max-width: #{$breakpoint}px) {\r\n                @include elypsisResProp($elypsis, $fontName, $line-height, $line-to-show, $breakpoint );\r\n            }\r\n        }\r\n    }\r\n    \r\n    @each $breakpoint in var.$mobileBreakpoints {\r\n        @media (max-width: #{$breakpoint}px) {\r\n            @include elypsisResProp($elypsis, $fontName, $line-height, $line-to-show, $breakpoint );\r\n        }\r\n    }\r\n}\r\n\r\n// print font-size as root variable\r\n@mixin fontVar() {\r\n    @each $breakpoint in var.$desktopBreakpoints {\r\n        @if ( $breakpoint == list.nth( var.$desktopBreakpoints, 1 ) ) {\r\n            @each $fontName, $value in var.$fontSizes {\r\n                --tdfs-#{$fontName}: #{ func.unit( map.get($value, desktop, font-size), list.nth( var.$desktopBreakpoints, 1 )) };\r\n            }\r\n        }\r\n        @else {\r\n            @media (max-width: #{$breakpoint}px) {\r\n                $breakValue: null;\r\n                @each $fontName, $value in var.$fontSizes {\r\n                    @if ( map.get( var.$fontSizes, $fontName, $breakpoint, font-size ) ) {\r\n                        $breakValue: $breakpoint;\r\n                    }\r\n                    @else {\r\n                        $breakValue: desktop;\r\n                    }\r\n                    --tdfs-#{$fontName}: #{ func.unit( map.get($value, $breakValue, font-size), $breakpoint) };\r\n                }\r\n            }\r\n        }\r\n    }\r\n    @each $breakpoint in var.$mobileBreakpoints {\r\n        @media (max-width: #{$breakpoint}px) {\r\n            $breakValue: null;\r\n            @each $fontName, $value in var.$fontSizes {\r\n                @if ( map.get( var.$fontSizes, $fontName, $breakpoint, font-size ) ) {\r\n                    $breakValue: $breakpoint;\r\n                }\r\n                @else if ( map.get( var.$fontSizes, $fontName, mobile, font-size ) ) {\r\n                    $breakValue: mobile;\r\n                }\r\n                @else {\r\n                    $breakValue: desktop;\r\n                }\r\n                --tdfs-#{$fontName}: #{ func.unit( map.get($value, $breakValue, font-size), $breakpoint) };\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// create all registered font as extend\r\n@mixin createFontExtend() {\r\n    @each $fontName in map.keys(var.$fontSizes) {\r\n        %fs-#{$fontName} {\r\n            font-size: var(--tdfs-#{$fontName});\r\n\r\n            @each $breakpoint in var.$desktopBreakpoints {\r\n                @if ( $breakpoint == list.nth( var.$desktopBreakpoints, 1 ) ) {\r\n                    @include printOtherProp($fontName, desktop);\r\n                }\r\n                @else {\r\n                    @media (max-width: #{$breakpoint}px) {\r\n\r\n                        @if ( map.get( var.$fontSizes, $fontName, $breakpoint ) ) {\r\n                            @include printOtherProp($fontName, $breakpoint);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n    \r\n            @each $breakpoint in var.$mobileBreakpoints {\r\n                @media (max-width: #{$breakpoint}px) {\r\n                    @if ( $breakpoint == list.nth( var.$mobileBreakpoints, 1 ) ) {\r\n        \r\n                        @each $property, $value in map.get( var.$fontSizes, $fontName, mobile ) {\r\n                            @if ( $property != font-size ) {\r\n                                @if ( map.get( var.$fontSizes, $fontName, $breakpoint, $property ) ) {\r\n                                    $value: map.get( var.$fontSizes, $fontName, $breakpoint, $property );\r\n                                }\r\n                                #{$property}: $value;\r\n                            }\r\n                        }\r\n                    }\r\n                    @else {\r\n                        @include printOtherProp($fontName, $breakpoint);\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// print all font-szie as own class\r\n@mixin printFontClass() {\r\n    @each $fontName in map.keys(var.$fontSizes) {\r\n        .fs-#{$fontName} {\r\n            @extend %fs-#{$fontName};\r\n        }\r\n    }\r\n}\r\n// responsive VW unit\r\n@mixin vwDesktop($property, $value) {\r\n    \r\n    @each $breakpoint in var.$desktopBreakpoints {\r\n        @if ( $breakpoint == list.nth( var.$desktopBreakpoints, 1 ) ) {\r\n            #{$property}: func.unit($value, $breakpoint);\r\n        }\r\n        @else {\r\n            @media screen and (max-width: #{$breakpoint}px) {\r\n                #{$property}: func.unit($value, $breakpoint);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n@mixin vwMobile($property, $value) {\r\n\r\n    @each $breakpoint in var.$mobileBreakpoints {\r\n        @media screen and (max-width: #{$breakpoint}px) {\r\n            #{$property}: func.unit($value, $breakpoint);\r\n        }\r\n    }\r\n\r\n}\r\n@mixin vwUnit($property, $valueD, $valueM: null) {\r\n\r\n    @if ( $valueM == null ) {\r\n        $valueM: $valueD;\r\n    }\r\n\r\n    @include vwDesktop($property, $valueD);\r\n    @include vwMobile($property, $valueM);\r\n\r\n}","@use 'sass:math';\r\n@use '../_config.scss' as *;\r\n\r\n.term-conditions {\r\n    @include vwUnit(padding, 50 0 70 0);\r\n    &__title {\r\n        @include typo(h1);\r\n        background: linear-gradient(90deg, #34F461 0%, #178DDD 100%);\r\n        -webkit-background-clip: text;\r\n        -webkit-text-fill-color: transparent;\r\n        letter-spacing: 1px;\r\n        text-transform: uppercase;\r\n        text-align: center;\r\n        @include vwUnit(padding-bottom, 50);\r\n        border-bottom: 1px solid #3F3F46;\r\n    }\r\n    &__row {\r\n        justify-content: center;\r\n        @include vwUnit(padding-top, 30);\r\n    }\r\n    &__desc {\r\n        color: color(white);\r\n        h2 {\r\n            @include typo(h4);\r\n            @include vwUnit(margin, 50 0 20 0);\r\n        }\r\n        p {\r\n            @include typo(paragraph-md);\r\n            font-weight: 400;\r\n        }\r\n    }\r\n}"],"names":[],"sourceRoot":""}