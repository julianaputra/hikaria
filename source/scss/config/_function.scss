@use 'sass:map';
@use 'sass:list';
@use 'sass:math';
@use 'sass:color';
@use '_variable.scss' as var;

// |‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾| //
// | tmdrFunc v.1.3.1                        | //
// | last update : 19 / 03 / 2024            | //
// |_________________________________________| //

// get color from color map
@function color($colorName, $colorValue: default) {
    @return map.get(var.$color, $colorName, $colorValue);
}

// modified known color
@function colorMod( $color, $lightValue ) {
    @return color.scale($color, $lightness: $lightValue);
}

// convert target in px to rem (16)
@function remSize($number) {
    @return #{math.div($number, 16)}rem;
}

// convert target in px to vw
@function vwSize($number, $breakpoints) {
    @return #{math.div($number, $breakpoints) * 100}vw;
}

// theme unit functions
@function getIndex( $value, $i ) {
    @return list.nth($value, $i);
}

@function unit( $value, $breakpoint ) {

    $map: ();

    @for $i from 1 through list.length($value) {

        $item: null;
        
        @if ( type-of( getIndex($value, $i) ) != string ) {

            @if( var.$themeUnit == 'vw' ) {
                $item: vwSize( getIndex($value, $i), $breakpoint );
            }
            @else if ( var.$themeUnit == 'rem' ) {
                $item: remSize( getIndex($value, $i) );
            }
            @else if ( var.$themeUnit == 'px' ) {
                $item: #{getIndex($value, $i)}px;
            }
        } @else {

            $item: #{getIndex($value, $i)};
        }

        $map: list.append($map, $item);
    }

    @return $map;
}

// return first registered responsive data
@function desktopStart() {
    @return #{list.nth(var.$desktopBreakpoints, 1)}px;
};

@function mobileStart() {
    @return #{list.nth(var.$mobileBreakpoints, 1)}px;
};